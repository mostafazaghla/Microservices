name: Build and Deploy to AKS

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      AKS_RESOURCE_GROUP: "pwc-aks-resource-group"
      AKS_CLUSTER_NAME: "pwc-aks-cluster"
      IMAGE_NAME: "pwc-microservice"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Kubernetes Context
      run: |
        az aks get-credentials \
          --resource-group $AKS_RESOURCE_GROUP \
          --name $AKS_CLUSTER_NAME

    - name: Build Docker Image
      run: |
        docker build -t $IMAGE_NAME:latest .

    - name: Push Docker Image to Azure Container Registry (Optional)
      run: |
        echo "Use an ACR registry if needed"

    - name: Apply Kubernetes Manifests
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml

name: Build, Scan, and Deploy to Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: self-hosted  # Specify local runner

    env:
      IMAGE_NAME: "zzlolo123/pwc-microservice"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image with Alpine
      run: |
        docker build -f Dockerfile.alpine -t $IMAGE_NAME:latest .

    - name: Scan Docker Image with Trivy
      uses: aquasecurity/trivy-action@v0.11.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: "table"
        exit-code: "0"  # Set to "1" if you want to fail the pipeline on vulnerabilities
        severity: "HIGH,CRITICAL"

    - name: Push Docker Image
      run: |
        docker push $IMAGE_NAME:latest

    - name: Deploy to AKS
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
